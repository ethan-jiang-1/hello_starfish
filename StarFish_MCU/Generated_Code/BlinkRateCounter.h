/* ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename    : BlinkRateCounter.h
**     Project     : ProcessorExpert
**     Processor   : MKL26Z128VLH4
**     Component   : TimerUnit_LDD
**     Version     : Component 01.140, Driver 01.10, CPU db: 3.00.000
**     Compiler    : Keil ARM C/C++ Compiler
**     Date/Time   : 2013-04-18, 10:22, # CodeGen: 13
**     Abstract    :
**          This TimerUnit component provides a low level API for unified hardware access across
**          various timer devices using the Prescaler-Counter-Compare-Capture timer structure.
**     Settings    :
**          Component name                                 : BlinkRateCounter
**          Module name                                    : PIT
**          Counter                                        : PIT_CVAL0
**          Counter direction                              : Down
**          Counter width                                  : 32 bits
**          Value type                                     : Optimal
**          Input clock source                             : Internal
**            Counter frequency                            : 24 MHz
**          Counter restart                                : On-match
**            Period device                                : PIT_LDVAL0
**            Period                                       : 100 ms
**            Interrupt                                    : Enabled
**              Interrupt                                  : INT_PIT
**              Interrupt priority                         : minimal priority
**          Channel list                                   : 0
**          Initialization                                 : 
**            Enabled in init. code                        : yes
**            Auto initialization                          : no
**            Event mask                                   : 
**              OnCounterRestart                           : Enabled
**              OnChannel0                                 : Disabled
**              OnChannel1                                 : Disabled
**              OnChannel2                                 : Disabled
**              OnChannel3                                 : Disabled
**              OnChannel4                                 : Disabled
**              OnChannel5                                 : Disabled
**              OnChannel6                                 : Disabled
**              OnChannel7                                 : Disabled
**          CPU clock/configuration selection              : 
**            Clock configuration 0                        : This component enabled
**            Clock configuration 1                        : This component disabled
**            Clock configuration 2                        : This component disabled
**            Clock configuration 3                        : This component disabled
**            Clock configuration 4                        : This component disabled
**            Clock configuration 5                        : This component disabled
**            Clock configuration 6                        : This component disabled
**            Clock configuration 7                        : This component disabled
**     Contents    :
**         Init           - LDD_TDeviceData* BlinkRateCounter_Init(LDD_TUserData *UserDataPtr);
**         SetPeriodTicks - LDD_TError BlinkRateCounter_SetPeriodTicks(LDD_TDeviceData *DeviceDataPtr,...
**
**     Copyright : 1997 - 2012 Freescale Semiconductor, Inc. All Rights Reserved.
**     
**     http      : www.freescale.com
**     mail      : support@freescale.com
** ###################################################################*/
/*!
** @file BlinkRateCounter.h
** @version 01.10
** @date 2013-04-18, 10:22, # CodeGen: 13
** @brief
**          This TimerUnit component provides a low level API for unified hardware access across
**          various timer devices using the Prescaler-Counter-Compare-Capture timer structure.
*/         
/*!
**  @addtogroup BlinkRateCounter_module BlinkRateCounter module documentation
**  @{
*/         

#ifndef __BlinkRateCounter_H
#define __BlinkRateCounter_H

/* MODULE BlinkRateCounter. */

/* Include shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
/* Include inherited beans */

#include "PIT_PDD.h"
#include "Cpu.h"


#ifndef __BWUserType_BlinkRateCounter_TValueType
#define __BWUserType_BlinkRateCounter_TValueType
  typedef uint32_t BlinkRateCounter_TValueType ; /* Type for data parameters of methods */
#endif
#define BlinkRateCounter_CNT_INP_FREQ_U_0 0x016E3600UL /* Counter input frequency in Hz */
#define BlinkRateCounter_CNT_INP_FREQ_R_0 23999808.00153599F /* Counter input frequency in Hz */
#define BlinkRateCounter_CNT_INP_FREQ_COUNT 0U /* Count of predefined counter input frequencies */
#define BlinkRateCounter_PERIOD_TICKS 0x00249F00UL /* Initialization value of period in 'counter ticks' */
#define BlinkRateCounter_NUMBER_OF_CHANNELS 0x00U /* Count of predefined channels */
#define BlinkRateCounter_COUNTER_WIDTH 0x20U /* Counter width in bits  */
#define BlinkRateCounter_COUNTER_DIR DIR_DOWN /* Direction of counting */
/*! Peripheral base address of a device allocated by the component. This constant can be used directly in PDD macros. */
#define BlinkRateCounter_PRPH_BASE_ADDRESS  0x40037000U
  
/* Methods configuration constants - generated for all enabled component's methods */
#define BlinkRateCounter_Init_METHOD_ENABLED /*!< Init method of the component BlinkRateCounter is enabled (generated) */
#define BlinkRateCounter_SetPeriodTicks_METHOD_ENABLED /*!< SetPeriodTicks method of the component BlinkRateCounter is enabled (generated) */

/* Events configuration constants - generated for all enabled component's events */
#define BlinkRateCounter_OnCounterRestart_EVENT_ENABLED /*!< OnCounterRestart event of the component BlinkRateCounter is enabled (generated) */



/*
** ===================================================================
**     Method      :  BlinkRateCounter_Init (component TimerUnit_LDD)
**     Description :
**         Initializes the device. Allocates memory for the device data
**         structure, allocates interrupt vectors and sets interrupt
**         priority, sets pin routing, sets timing, etc. If the
**         property <"Enable in init. code"> is set to "yes" value then
**         the device is also enabled (see the description of the
**         <Enable> method). In this case the <Enable> method is not
**         necessary and needn't to be generated. This method can be
**         called only once. Before the second call of Init the <Deinit>
**         must be called first.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * UserDataPtr     - Pointer to the user or
**                           RTOS specific data. This pointer will be
**                           passed as an event or callback parameter.
**     Returns     :
**         ---             - Pointer to the dynamically allocated
**                           private structure or NULL if there was an
**                           error.
** ===================================================================
*/
LDD_TDeviceData* BlinkRateCounter_Init(LDD_TUserData *UserDataPtr);

/*
** ===================================================================
**     Method      :  BlinkRateCounter_SetPeriodTicks (component TimerUnit_LDD)
**     Description :
**         The method sets timer re-initialization period (in timer
**         ticks). This method is available only if the property
**         <"Counter restart"> is switched to 'on-match' value.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**         Ticks           - Number of counter ticks before counter
**                           re-initialization. Value 0 means maximal
**                           period value the same as "free-running
**                           mode", e.g. counter overflow or underflow
**                           without any explicit re-initialization.
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK 
**                           ERR_PARAM_TICKS - Ticks parameter is out of
**                           possible range.
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration
** ===================================================================
*/
LDD_TError BlinkRateCounter_SetPeriodTicks(LDD_TDeviceData *DeviceDataPtr, BlinkRateCounter_TValueType Ticks);

/*
** ===================================================================
**     Method      :  BlinkRateCounter_Interrupt (component TimerUnit_LDD)
**
**     Description :
**         The method services the interrupt of the selected peripheral(s)
**         and eventually invokes event(s) of the component.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
/* {MQXLite RTOS Adapter} ISR function prototype */
void BlinkRateCounter_Interrupt(LDD_RTOS_TISRParameter _isrParameter);

/* END BlinkRateCounter. */

#endif
/* ifndef __BlinkRateCounter_H */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.0.13 [05.05]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
