<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\UV4Build\StarFish_MCU.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\UV4Build\StarFish_MCU.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Fri Dec 05 17:10:55 2014
<BR><P>
<H3>Maximum Stack Usage =        488 bytes + Unknown(Functions without stacksize, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
app_mma8451_control_task &rArr; mma8451_getdata &rArr; FindLastPeak &rArr; Get_var &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[1f]">__boot</a>
 <LI><a href="#[20]">__set_MSP</a>
 <LI><a href="#[92]">_sched_start_internal</a>
 <LI><a href="#[a8]">_sched_run_internal</a>
 <LI><a href="#[75]">_sched_check_scheduler_internal</a>
 <LI><a href="#[5a]">_sched_execute_scheduler_internal</a>
 <LI><a href="#[127]">_mqx_api_call</a>
 <LI><a href="#[77]">_task_block</a>
 <LI><a href="#[7]">_int_kernel_isr</a>
 <LI><a href="#[c7]">_psp_exception_return</a>
 <LI><a href="#[99]">_mem_test_and_set</a>
 <LI><a href="#[ab]">__get_PSP</a>
 <LI><a href="#[181]">__get_MSP</a>
 <LI><a href="#[182]">__get_PSR</a>
 <LI><a href="#[183]">__enable_interrupt</a>
 <LI><a href="#[184]">__disable_interrupt</a>
 <LI><a href="#[185]">__get_LR</a>
 <LI><a href="#[186]">__get_PC</a>
 <LI><a href="#[187]">__get_CONTROL</a>
 <LI><a href="#[14]">_int_kernel_isr_epilog</a>
</UL>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1d]">Cpu_INT_NMIInterrupt</a> from cpu.o(.text) referenced from vectors.o(.vectortable)
 <LI><a href="#[1e]">Cpu_Interrupt</a> from cpu.o(.text) referenced 12 times from vectors.o(.vectortable)
 <LI><a href="#[3]">I2C_Interrupt</a> from i2c.o(.text) referenced from i2c.o(.text)
 <LI><a href="#[16]">Init_Task</a> from mqx_tasks.o(.text) referenced from task_template_list.o(.constdata)
 <LI><a href="#[f]">MMA8451_INT1_isr_service</a> from app_mma8451.o(.text) referenced from app_mma8451.o(.text)
 <LI><a href="#[4]">SystemTimer1_Interrupt</a> from systemtimer1.o(.text) referenced from systemtimer1.o(.text)
 <LI><a href="#[1f]">__boot</a> from boot.o(. text) referenced from vectors.o(.vectortable)
 <LI><a href="#[1]">__init_hardware</a> from cpu.o(.text) referenced from startup_arm_cc.o(.emb_text)
 <LI><a href="#[2]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_arm_cc.o(.emb_text)
 <LI><a href="#[8]">_int_default_isr</a> from int.o(.text) referenced from int.o(.text)
 <LI><a href="#[5]">_int_exception_isr</a> from int_xcpt.o(.text) referenced from int.o(.text)
 <LI><a href="#[7]">_int_kernel_isr</a> from dispatch.o(KERNEL) referenced from int.o(.text)
 <LI><a href="#[7]">_int_kernel_isr</a> from dispatch.o(KERNEL) referenced 33 times from vectors.o(.vectortable)
 <LI><a href="#[14]">_int_kernel_isr_epilog</a> from dispatch.o(KERNEL) referenced from dispatch.o(KERNEL)
 <LI><a href="#[6]">_int_unexpected_isr</a> from int_unx.o(.text) referenced from int.o(.text)
 <LI><a href="#[9]">_mqx_idle_task</a> from idletask.o(.text) referenced from mqx_utils.o(.text)
 <LI><a href="#[a]">_mutex_cleanup</a> from mutex.o(.text) referenced from mutex.o(.text)
 <LI><a href="#[12]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[11]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[15]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[15]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[b]">_task_exit_function_internal</a> from task.o(.text) referenced 2 times from task.o(.text)
 <LI><a href="#[c]">adc0_isr</a> from dma1.o(.text) referenced from dma1.o(.text)
 <LI><a href="#[17]">app_mma8451_control_task</a> from app_mma8451.o(.text) referenced from task_template_list.o(.constdata)
 <LI><a href="#[18]">app_wifi_control_task</a> from app_wifi.o(.text) referenced from task_template_list.o(.constdata)
 <LI><a href="#[1a]">cmd_list</a> from app_shell.o(.text) referenced from app_shell.o(.data)
 <LI><a href="#[1b]">get_mqxlite_status</a> from app_shell.o(.text) referenced from app_shell.o(.data)
 <LI><a href="#[13]">isspace</a> from isspace_o.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[d]">lptmr_isr</a> from lptmr.o(.text) referenced from lptmr.o(.text)
 <LI><a href="#[0]">main</a> from processorexpert.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[19]">shell_task</a> from app_shell.o(.text) referenced from task_template_list.o(.constdata)
 <LI><a href="#[10]">uart0_irq_handler</a> from app_wifi.o(.text) referenced from app_wifi.o(.text)
 <LI><a href="#[e]">uart1_irq_handler</a> from app_shell.o(.text) referenced from app_trace.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1f]"></a>__boot</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, boot.o(. text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__thumb_startup
</UL>

<P><STRONG><a name="[20]"></a>__set_MSP</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, boot.o(. text))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_int_install
</UL>

<P><STRONG><a name="[2]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_arm_cc.o(.emb_text)
</UL>
<P><STRONG><a name="[130]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry4.o(.ARM.Collect$$$$00000003))

<P><STRONG><a name="[22]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[120]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[131]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[132]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[133]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[134]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[135]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[21]"></a>__thumb_startup</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_arm_cc.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__boot
</UL>

<P><STRONG><a name="[1d]"></a>Cpu_INT_NMIInterrupt</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Cpu_INT_NMIInterrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cpu_OnNMIINT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(.vectortable)
</UL>
<P><STRONG><a name="[1e]"></a>Cpu_Interrupt</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vectors.o(.vectortable)
</UL>
<P><STRONG><a name="[1]"></a>__init_hardware</STRONG> (Thumb, 252 bytes, Stack size 0 bytes, cpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arm_cc.o(.emb_text)
</UL>
<P><STRONG><a name="[25]"></a>PE_low_level_init</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = PE_low_level_init &rArr; _mqxlite_init &rArr; _lwsem_create &rArr; _lwsem_create_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqxlite_init
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>I2C_Interrupt</STRONG> (Thumb, 450 bytes, Stack size 24 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_Interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_OnMasterBlockSent
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_OnMasterBlockReceived
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_OnError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c.o(.text)
</UL>
<P><STRONG><a name="[2a]"></a>I2C_Init</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_Init &rArr; _int_install_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_get_isr_data
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mma8451_control_task
</UL>

<P><STRONG><a name="[2d]"></a>I2C_Deinit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
</UL>

<P><STRONG><a name="[2e]"></a>I2C_MasterSendBlock</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_MasterSendBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAccRegs
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAccRegs
</UL>

<P><STRONG><a name="[31]"></a>I2C_MasterReceiveBlock</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_MasterReceiveBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAccRegs
</UL>

<P><STRONG><a name="[136]"></a>I2C_SelectSlaveDevice</STRONG> (Thumb, 146 bytes, Stack size 12 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[32]"></a>I2C_GetError</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>

<P><STRONG><a name="[3f]"></a>I2C_CheckBus</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_CheckBus
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAccRegs
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAccRegs
</UL>

<P><STRONG><a name="[33]"></a>SystemTimer1_OnCounterRestart</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, mqx1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SystemTimer1_OnCounterRestart &rArr; _time_notify_kernel &rArr; _psp_normalize_ticks &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_notify_kernel
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimer1_Interrupt
</UL>

<P><STRONG><a name="[35]"></a>SystemTimer1_GetTicsPerSecond</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, mqx1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemTimer1_GetTicsPerSecond &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimer1_GetPeriodTicks
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimer1_GetInputFrequency
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqxlite_init
</UL>

<P><STRONG><a name="[4]"></a>SystemTimer1_Interrupt</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, systemtimer1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SystemTimer1_Interrupt &rArr; SystemTimer1_OnCounterRestart &rArr; _time_notify_kernel &rArr; _psp_normalize_ticks &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimer1_OnCounterRestart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> systemtimer1.o(.text)
</UL>
<P><STRONG><a name="[39]"></a>SystemTimer1_Init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, systemtimer1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SystemTimer1_Init &rArr; _int_install_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_get_isr_data
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqxlite_init
</UL>

<P><STRONG><a name="[3a]"></a>SystemTimer1_Deinit</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, systemtimer1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
</UL>

<P><STRONG><a name="[8f]"></a>SystemTimer1_Enable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, systemtimer1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqxlite
</UL>

<P><STRONG><a name="[36]"></a>SystemTimer1_GetInputFrequency</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, systemtimer1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimer1_GetTicsPerSecond
</UL>

<P><STRONG><a name="[137]"></a>SystemTimer1_SetPeriodTicks</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, systemtimer1.o(.text), UNUSED)

<P><STRONG><a name="[37]"></a>SystemTimer1_GetPeriodTicks</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, systemtimer1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimer1_GetTicsPerSecond
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqxlite_init
</UL>

<P><STRONG><a name="[3b]"></a>SystemTimer1_ResetCounter</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, systemtimer1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>

<P><STRONG><a name="[138]"></a>SystemTimer1_GetCounterValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, systemtimer1.o(.text), UNUSED)

<P><STRONG><a name="[139]"></a>PWMTimerRGB_Init</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, pwmtimerrgb.o(.text), UNUSED)

<P><STRONG><a name="[13a]"></a>PWMTimerRGB_Deinit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pwmtimerrgb.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>PWMTimerRGB_Enable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, pwmtimerrgb.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorTask
</UL>

<P><STRONG><a name="[3d]"></a>PWMTimerRGB_Disable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pwmtimerrgb.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlinkRateCounter_OnCounterRestart
</UL>

<P><STRONG><a name="[13b]"></a>PWMTimerRGB_GetCounterValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pwmtimerrgb.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>PWMTimerRGB_SetOffsetTicks</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, pwmtimerrgb.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorTask
</UL>

<P><STRONG><a name="[13c]"></a>PWMTimerRGB_GetOffsetTicks</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, pwmtimerrgb.o(.text), UNUSED)

<P><STRONG><a name="[3c]"></a>BlinkRateCounter_OnCounterRestart</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, events.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMTimerRGB_Disable
</UL>

<P><STRONG><a name="[27]"></a>I2C_OnMasterBlockSent</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, events.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Interrupt
</UL>

<P><STRONG><a name="[28]"></a>I2C_OnMasterBlockReceived</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, events.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Interrupt
</UL>

<P><STRONG><a name="[24]"></a>Cpu_OnNMIINT</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, events.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cpu_INT_NMIInterrupt
</UL>

<P><STRONG><a name="[29]"></a>I2C_OnError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, events.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Interrupt
</UL>

<P><STRONG><a name="[3e]"></a>ReadAccRegs</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, mma845xq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ReadAccRegs &rArr; I2C_MasterReceiveBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckBus
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceiveBlock
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterSendBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putmma8451standby
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorTask
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mma8451_control_task
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putmma8451running
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mma8451_getdata
</UL>

<P><STRONG><a name="[40]"></a>WriteAccRegs</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, mma845xq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = WriteAccRegs &rArr; I2C_MasterSendBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckBus
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterSendBlock
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putmma8451standby
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mma8451_control_task
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putmma8451running
</UL>

<P><STRONG><a name="[0]"></a>main</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, processorexpert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = main &rArr; _mqxlite &rArr; _task_init_internal &rArr; _task_alloc_td_internal &rArr; _mem_zero &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqxlite
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_low_level_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[13d]"></a>GetTemperature</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mqx_tasks.o(.text), UNUSED)

<P><STRONG><a name="[13e]"></a>GetLightON</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mqx_tasks.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>GetTouchON</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mqx_tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Task
</UL>

<P><STRONG><a name="[d5]"></a>GetSysStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mqx_tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lptmr_isr
</UL>

<P><STRONG><a name="[50]"></a>SetSysStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mqx_tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Task
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lptmr_isr
</UL>

<P><STRONG><a name="[16]"></a>Init_Task</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, mqx_tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = Init_Task &rArr; _task_create_at &rArr; _task_build_internal &rArr; _task_init_internal &rArr; _task_alloc_td_internal &rArr; _mem_zero &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putmma8451standby
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putmma8451detect
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_vlps
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_get_elapsed_ticks
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_create_at
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lptmr_Start
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lptmr_Init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibrate_ADC
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysStatus
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTouchON
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_version_information
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_template_list.o(.constdata)
</UL>
<P><STRONG><a name="[54]"></a>ColorTask</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, mqx_tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_ticks
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAccRegs
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMTimerRGB_SetOffsetTicks
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMTimerRGB_Enable
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[59]"></a>_time_delay_internal</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, time_ticks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = _time_delay_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_execute_scheduler_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait_timed_internal
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmsgq_receive
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_until
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_for
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_ticks
</UL>

<P><STRONG><a name="[5b]"></a>_time_delay_for</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, time_ticks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_add_ticks
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_internal
</UL>

<P><STRONG><a name="[58]"></a>_time_delay_ticks</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, time_ticks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = _time_delay_ticks &rArr; _time_delay_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorTask
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_task
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mma8451_control_task
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_es201_send_task
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sms_alarm_message
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sms_alarm_command
</UL>

<P><STRONG><a name="[5e]"></a>_time_delay_until</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, time_ticks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_internal
</UL>

<P><STRONG><a name="[5f]"></a>_time_diff_ticks</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, time_ticks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_subtract_ticks
</UL>

<P><STRONG><a name="[61]"></a>_time_diff_ticks_int32</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, time_ticks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_subtract_ticks_int32
</UL>

<P><STRONG><a name="[63]"></a>_time_dequeue</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, time_ticks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_td
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>

<P><STRONG><a name="[65]"></a>_time_dequeue_td</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, time_ticks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>

<P><STRONG><a name="[4e]"></a>_time_get_elapsed_ticks</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, time_ticks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _time_get_elapsed_ticks &rArr; _psp_normalize_ticks &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_normalize_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Task
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mma8451_getdata
</UL>

<P><STRONG><a name="[67]"></a>_time_get_elapsed_ticks_fast</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, time_ticks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_normalize_ticks
</UL>

<P><STRONG><a name="[13f]"></a>_time_get_hwticks</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, time_ticks.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>_time_get_ticks</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, time_ticks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_normalize_ticks
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_add_ticks
</UL>

<P><STRONG><a name="[140]"></a>_time_get_hwticks_per_tick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, time_ticks.o(.text), UNUSED)

<P><STRONG><a name="[141]"></a>_time_init_ticks</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, time_ticks.o(.text), UNUSED)

<P><STRONG><a name="[34]"></a>_time_notify_kernel</STRONG> (Thumb, 354 bytes, Stack size 24 bytes, time_ticks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _time_notify_kernel &rArr; _psp_normalize_ticks &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_normalize_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimer1_OnCounterRestart
</UL>

<P><STRONG><a name="[69]"></a>_time_set_ticks</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, time_ticks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_subtract_ticks
</UL>

<P><STRONG><a name="[142]"></a>_time_set_timer_vector</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, time_ticks.o(.text), UNUSED)

<P><STRONG><a name="[143]"></a>_time_set_hwtick_function</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, time_ticks.o(.text), UNUSED)

<P><STRONG><a name="[144]"></a>_time_set_hwticks_per_tick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, time_ticks.o(.text), UNUSED)

<P><STRONG><a name="[145]"></a>_time_get_ticks_per_sec</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, time_ticks.o(.text), UNUSED)

<P><STRONG><a name="[9]"></a>_mqx_idle_task</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, idletask.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _mqx_idle_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqx_utils.o(.text)
</UL>
<P><STRONG><a name="[30]"></a>_int_enable</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, int.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_test
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait_until
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait_ticks
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait_for
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_test
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_destroy_internal
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_create_internal
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmsgq_send
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmsgq_receive
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_default_isr
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_td
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_dequeue_td
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_dequeue
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimer1_ResetCounter
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetError
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceiveBlock
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterSendBlock
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_start_preemption
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_stop_preemption
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_priority
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_abort_internal
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_destroy_internal
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_ready
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_restart_func
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_set_priority_ceiling
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_test
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_destroy
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_lock
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_create_component
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_cleanup
</UL>

<P><STRONG><a name="[2f]"></a>_int_disable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, int.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_test
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_test
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_destroy_internal
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_create_internal
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmsgq_send
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmsgq_receive
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_default_isr
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_dequeue_td
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_dequeue
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimer1_ResetCounter
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetError
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceiveBlock
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterSendBlock
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_start_preemption
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_stop_preemption
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_priority
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_abort_internal
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_destroy_internal
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_restart_func
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_set_priority_ceiling
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_test
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_destroy
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_create_component
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_cleanup
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_exit
</UL>

<P><STRONG><a name="[8]"></a>_int_default_isr</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _int_default_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error_td_internal
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> int.o(.text)
</UL>
<P><STRONG><a name="[146]"></a>_int_get_default_isr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, int.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>_int_get_exception_handler</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _int_get_exception_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_exception_isr
</UL>

<P><STRONG><a name="[6c]"></a>_int_get_isr</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, int.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
</UL>

<P><STRONG><a name="[2b]"></a>_int_get_isr_data</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _int_get_isr_data
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_exception_isr
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimer1_Init
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>

<P><STRONG><a name="[147]"></a>_int_get_isr_depth</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, int.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>_int_install_default_isr</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, int.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_unexpected_isr
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_exception_isr
</UL>

<P><STRONG><a name="[6d]"></a>_int_install_exception_isr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, int.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_default_isr
</UL>

<P><STRONG><a name="[2c]"></a>_int_install_isr</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _int_install_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lptmr_Init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Init
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimer1_Deinit
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimer1_Init
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Deinit
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_PTA14_interrupt
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart0
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart2_fortest
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart1
</UL>

<P><STRONG><a name="[6f]"></a>_int_install_unexpected_isr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, int.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_default_isr
</UL>

<P><STRONG><a name="[70]"></a>_int_set_exception_handler</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, int.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
</UL>

<P><STRONG><a name="[71]"></a>_int_set_isr_data</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, int.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
</UL>

<P><STRONG><a name="[c9]"></a>_int_init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _int_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_int_init
</UL>

<P><STRONG><a name="[73]"></a>_lwmsgq_init_internal</STRONG> (Thumb, 212 bytes, Stack size 20 bytes, lwmsgq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _lwmsgq_init_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmsgq_init
</UL>

<P><STRONG><a name="[72]"></a>_lwmsgq_init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lwmsgq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _lwmsgq_init &rArr; _lwmsgq_init_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmsgq_init_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_task
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_wifi_control_task
</UL>

<P><STRONG><a name="[74]"></a>_lwmsgq_receive</STRONG> (Thumb, 364 bytes, Stack size 48 bytes, lwmsgq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = _lwmsgq_receive &rArr; _psp_add_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_check_scheduler_internal
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_execute_scheduler_internal
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_add_ticks
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_internal
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_task
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_wifi_control_task
</UL>

<P><STRONG><a name="[76]"></a>_lwmsgq_send</STRONG> (Thumb, 348 bytes, Stack size 48 bytes, lwmsgq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = _lwmsgq_send
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_block
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_check_scheduler_internal
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_execute_scheduler_internal
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_irq_handler
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_irq_handler
</UL>

<P><STRONG><a name="[78]"></a>_lwsem_create_internal</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, lwsem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _lwsem_create_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_create_hidden
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_create
</UL>

<P><STRONG><a name="[79]"></a>_lwsem_create</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lwsem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _lwsem_create &rArr; _lwsem_create_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_create_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lptmr_Init
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mma8451_control_task
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqxlite_init
</UL>

<P><STRONG><a name="[7a]"></a>_lwsem_create_hidden</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lwsem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_create_internal
</UL>

<P><STRONG><a name="[7b]"></a>_lwsem_destroy_internal</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, lwsem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_check_scheduler_internal
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_destroy
</UL>

<P><STRONG><a name="[7c]"></a>_lwsem_destroy</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lwsem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_destroy_internal
</UL>

<P><STRONG><a name="[148]"></a>_lwsem_poll</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, lwsem.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>_lwsem_post</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, lwsem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _lwsem_post
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_check_scheduler_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd_wifidata
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA8451_INT1_isr_service
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lptmr_isr
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_template_index
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_id_from_name
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_build_internal
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_destroy_internal
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_restart_func
</UL>

<P><STRONG><a name="[7e]"></a>_lwsem_test</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, lwsem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_test
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>

<P><STRONG><a name="[4d]"></a>_lwsem_wait</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, lwsem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _lwsem_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_execute_scheduler_internal
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mma8451_control_task
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Task
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_template_index
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_id_from_name
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_build_internal
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_destroy_internal
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_restart_func
</UL>

<P><STRONG><a name="[80]"></a>_lwsem_wait_timed_internal</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lwsem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait_until
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait_ticks
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait_for
</UL>

<P><STRONG><a name="[81]"></a>_lwsem_wait_for</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, lwsem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait_timed_internal
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_add_ticks
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
</UL>

<P><STRONG><a name="[82]"></a>_lwsem_wait_ticks</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, lwsem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait_timed_internal
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_execute_scheduler_internal
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_es201_send_task
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sms_alarm_command
</UL>

<P><STRONG><a name="[83]"></a>_lwsem_wait_until</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, lwsem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait_timed_internal
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
</UL>

<P><STRONG><a name="[149]"></a>_mqx_get_kernel_data</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mqx_utils.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>_mqx_fatal_error</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mqx_utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _mqx_fatal_error
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_exception_isr
</UL>

<P><STRONG><a name="[14a]"></a>_mqx_get_cpu_type</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mqx_utils.o(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>_mqx_set_cpu_type</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mqx_utils.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqxlite_init
</UL>

<P><STRONG><a name="[14b]"></a>_mqx_get_initialization</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mqx_utils.o(.text), UNUSED)

<P><STRONG><a name="[14c]"></a>_mqx_get_exit_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mqx_utils.o(.text), UNUSED)

<P><STRONG><a name="[14d]"></a>_mqx_set_exit_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mqx_utils.o(.text), UNUSED)

<P><STRONG><a name="[14e]"></a>_mqx_get_system_task_id</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mqx_utils.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>_mqx_init_kernel_data_internal</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, mqx_utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _mqx_init_kernel_data_internal &rArr; _psp_set_kernel_disable_level
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_set_kernel_disable_level
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqxlite_init
</UL>

<P><STRONG><a name="[26]"></a>_mqxlite_init</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, mqxlite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _mqxlite_init &rArr; _lwsem_create &rArr; _lwsem_create_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_create
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimer1_Init
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimer1_GetPeriodTicks
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimer1_GetTicsPerSecond
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_fill_stack_internal
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_int_init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_init_readyqs
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_zero
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_set_vector_table
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_init_kernel_data_internal
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_set_cpu_type
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PE_low_level_init
</UL>

<P><STRONG><a name="[85]"></a>_mqx_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mqxlite.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqxlite
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_init_kernel_data_internal
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_fatal_error
</UL>

<P><STRONG><a name="[42]"></a>_mqxlite</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, mqxlite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = _mqxlite &rArr; _task_init_internal &rArr; _task_alloc_td_internal &rArr; _mem_zero &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimer1_Enable
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_ready_internal
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_init_internal
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_start_internal
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9e]"></a>_mutatr_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mutex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_init
</UL>

<P><STRONG><a name="[93]"></a>_mutex_unlock</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, mutex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _mutex_unlock &rArr; _sched_unboost_priority_internal &rArr; _sched_set_priority_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_check_scheduler_internal
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_unboost_priority_internal
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_boost_priority_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_cleanup
</UL>

<P><STRONG><a name="[a]"></a>_mutex_cleanup</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, mutex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _mutex_cleanup &rArr; _mutex_unlock &rArr; _sched_unboost_priority_internal &rArr; _sched_set_priority_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_unlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mutex.o(.text)
</UL>
<P><STRONG><a name="[96]"></a>_mutex_create_component</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, mutex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _mutex_create_component
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_init
</UL>

<P><STRONG><a name="[14f]"></a>_mutatr_destroy</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mutex.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>_mutex_lock</STRONG> (Thumb, 738 bytes, Stack size 32 bytes, mutex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _mutex_lock &rArr; _sched_boost_priority_internal &rArr; _sched_set_priority_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_execute_scheduler_internal
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_yield
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_insert_priorityq_internal
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_get_max_priority_on_q_internal
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_boost_priority_internal
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_test_and_set
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_destroy
</UL>

<P><STRONG><a name="[9c]"></a>_mutex_destroy</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_check_scheduler_internal
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error_td_internal
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_unboost_priority_internal
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_lock
</UL>

<P><STRONG><a name="[150]"></a>_mutatr_get_wait_protocol</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, mutex.o(.text), UNUSED)

<P><STRONG><a name="[151]"></a>_mutatr_get_priority_ceiling</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, mutex.o(.text), UNUSED)

<P><STRONG><a name="[152]"></a>_mutatr_get_sched_protocol</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, mutex.o(.text), UNUSED)

<P><STRONG><a name="[153]"></a>_mutatr_get_spin_limit</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, mutex.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>_mutex_init</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, mutex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _mutex_init &rArr; _mutex_create_component
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_create_component
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutatr_init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_init
</UL>

<P><STRONG><a name="[154]"></a>_mutatr_set_wait_protocol</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, mutex.o(.text), UNUSED)

<P><STRONG><a name="[155]"></a>_mutatr_set_priority_ceiling</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, mutex.o(.text), UNUSED)

<P><STRONG><a name="[156]"></a>_mutatr_set_sched_protocol</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, mutex.o(.text), UNUSED)

<P><STRONG><a name="[157]"></a>_mutatr_set_spin_limit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, mutex.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>_mutex_test</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_queue_test
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>

<P><STRONG><a name="[a0]"></a>_mutex_try_lock</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_boost_priority_internal
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_test_and_set
</UL>

<P><STRONG><a name="[a1]"></a>_mutex_set_priority_ceiling</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>

<P><STRONG><a name="[158]"></a>_mutex_get_priority_ceiling</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, mutex.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>_mutex_get_wait_count</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
</UL>

<P><STRONG><a name="[7f]"></a>_queue_test</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, qu_test.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_test
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_test
</UL>

<P><STRONG><a name="[159]"></a>_sched_get_max_priority</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sched.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>_sched_get_min_priority</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sched.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>_sched_yield</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _sched_yield
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_execute_scheduler_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_lock
</UL>

<P><STRONG><a name="[a3]"></a>_sched_set_priority_internal</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _sched_set_priority_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_execute_scheduler_internal
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_sync_priority_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_priority
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_unboost_priority_internal
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_boost_priority_internal
</UL>

<P><STRONG><a name="[94]"></a>_sched_boost_priority_internal</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _sched_boost_priority_internal &rArr; _sched_set_priority_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_check_scheduler_internal
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_set_priority_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_try_lock
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_lock
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_unlock
</UL>

<P><STRONG><a name="[95]"></a>_sched_unboost_priority_internal</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _sched_unboost_priority_internal &rArr; _sched_set_priority_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_check_scheduler_internal
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_set_priority_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_destroy
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_unlock
</UL>

<P><STRONG><a name="[9a]"></a>_sched_insert_priorityq_internal</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _sched_insert_priorityq_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_priority
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_lock
</UL>

<P><STRONG><a name="[9b]"></a>_sched_get_max_priority_on_q_internal</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _sched_get_max_priority_on_q_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_lock
</UL>

<P><STRONG><a name="[91]"></a>_task_ready_internal</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _task_ready_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_create_at
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqxlite
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_ready
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_restart_func
</UL>

<P><STRONG><a name="[5c]"></a>_task_set_error</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_set_isr_data
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_set_exception_handler
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_get_isr
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_get_exception_handler
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_until
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_for
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_create_at
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_get_isr_data
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_exit_handler
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_exit_handler
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_exception_handler
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_exception_handler
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_build_internal
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_ready
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_get_wait_count
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_init_internal
</UL>

<P><STRONG><a name="[a5]"></a>_task_ready</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _task_ready &rArr; _task_ready_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_check_scheduler_internal
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_ready_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_abort_internal
</UL>

<P><STRONG><a name="[64]"></a>_task_get_td</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _task_get_td
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_dequeue
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_task_stack_usage
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_priority
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_priority
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_parameter_for
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_parameter_for
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_index_from_id
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_template_ptr
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_exit_handler
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_exit_handler
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_exception_handler
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_exception_handler
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_abort_internal
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_destroy_internal
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_restart_func
</UL>

<P><STRONG><a name="[a6]"></a>_task_destroy_internal</STRONG> (Thumb, 404 bytes, Stack size 32 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _task_destroy_internal &rArr; _task_get_td
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_td
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_run_internal
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_destroy_stack_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_destroy
</UL>

<P><STRONG><a name="[a9]"></a>_task_destroy</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _task_destroy &rArr; _task_destroy_internal &rArr; _task_get_td
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_destroy_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_exit_function_internal
</UL>

<P><STRONG><a name="[b]"></a>_task_exit_function_internal</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _task_exit_function_internal &rArr; _task_destroy &rArr; _task_destroy_internal &rArr; _task_get_td
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_abort_internal
</UL>
<BR>[Address Reference Count : 2]<UL><LI> task.o(.text)
<LI> stack_bu.o(.text)
</UL>
<P><STRONG><a name="[aa]"></a>_task_abort_internal</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _task_abort_internal &rArr; _task_exit_function_internal &rArr; _task_destroy &rArr; _task_destroy_internal &rArr; _task_get_td
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_td
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PSP
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_exit_function_internal
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_abort
</UL>

<P><STRONG><a name="[ac]"></a>_task_abort</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _task_abort &rArr; _task_abort_internal &rArr; _task_exit_function_internal &rArr; _task_destroy &rArr; _task_destroy_internal &rArr; _task_get_td
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_abort_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_exception_isr
</UL>

<P><STRONG><a name="[8a]"></a>_task_fill_stack_internal</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqxlite_init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_init_internal
</UL>

<P><STRONG><a name="[ad]"></a>_task_alloc_td_internal</STRONG> (Thumb, 190 bytes, Stack size 56 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _task_alloc_td_internal &rArr; _mem_zero &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_init_internal
</UL>

<P><STRONG><a name="[90]"></a>_task_init_internal</STRONG> (Thumb, 300 bytes, Stack size 64 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = _task_init_internal &rArr; _task_alloc_td_internal &rArr; _mem_zero &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_build_stack_frame
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_alloc_td_internal
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_fill_stack_internal
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqxlite
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_build_internal
</UL>

<P><STRONG><a name="[af]"></a>_task_build_internal</STRONG> (Thumb, 124 bytes, Stack size 56 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = _task_build_internal &rArr; _task_init_internal &rArr; _task_alloc_td_internal &rArr; _mem_zero &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_init_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_create_at
</UL>

<P><STRONG><a name="[4b]"></a>_task_create_at</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = _task_create_at &rArr; _task_build_internal &rArr; _task_init_internal &rArr; _task_alloc_td_internal &rArr; _mem_zero &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_check_scheduler_internal
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_build_internal
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_ready_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Task
</UL>

<P><STRONG><a name="[b0]"></a>_task_get_exception_handler</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_td
</UL>

<P><STRONG><a name="[b1]"></a>_task_set_exception_handler</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_td
</UL>

<P><STRONG><a name="[b2]"></a>_task_get_exit_handler</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_td
</UL>

<P><STRONG><a name="[b3]"></a>_task_set_exit_handler</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_error
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_td
</UL>

<P><STRONG><a name="[b4]"></a>_task_get_id_from_name</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>

<P><STRONG><a name="[b6]"></a>_task_get_template_ptr</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_td
</UL>

<P><STRONG><a name="[b7]"></a>_task_get_template_index</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>

<P><STRONG><a name="[15b]"></a>_task_get_id_from_td</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, task.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>_task_get_index_from_id</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_td
</UL>

<P><STRONG><a name="[b9]"></a>_task_get_parameter_internal</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_get_stack_start
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_parameter_for
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_parameter
</UL>

<P><STRONG><a name="[bb]"></a>_task_get_parameter</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_parameter_internal
</UL>

<P><STRONG><a name="[bc]"></a>_task_get_parameter_for</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_td
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_parameter_internal
</UL>

<P><STRONG><a name="[bd]"></a>_task_set_parameter_internal</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_get_stack_start
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_parameter_for
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_parameter
</UL>

<P><STRONG><a name="[be]"></a>_task_set_parameter</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_parameter_internal
</UL>

<P><STRONG><a name="[bf]"></a>_task_set_parameter_for</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_td
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_parameter_internal
</UL>

<P><STRONG><a name="[c0]"></a>_task_get_priority</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_td
</UL>

<P><STRONG><a name="[c1]"></a>_task_set_priority</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_check_scheduler_internal
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_td
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_set_priority_internal
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_insert_priorityq_internal
</UL>

<P><STRONG><a name="[c3]"></a>_task_restart</STRONG> (Thumb, 30 bytes, Stack size 104 bytes, task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_restart_func
</UL>

<P><STRONG><a name="[c4]"></a>_task_stop_preemption</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>

<P><STRONG><a name="[c5]"></a>_task_start_preemption</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_check_scheduler_internal
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
</UL>

<P><STRONG><a name="[15c]"></a>_task_check_stack</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, task.o(.text), UNUSED)

<P><STRONG><a name="[15d]"></a>_task_get_creator</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, task.o(.text), UNUSED)

<P><STRONG><a name="[15e]"></a>_task_get_error</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, task.o(.text), UNUSED)

<P><STRONG><a name="[15f]"></a>_task_get_error_ptr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, task.o(.text), UNUSED)

<P><STRONG><a name="[160]"></a>_task_get_id</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, task.o(.text), UNUSED)

<P><STRONG><a name="[161]"></a>_task_exiting_function_internal</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, task.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>_task_sync_priority_internal</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_set_priority_internal
</UL>

<P><STRONG><a name="[6a]"></a>_task_set_error_td_internal</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_default_isr
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_destroy
</UL>

<P><STRONG><a name="[ba]"></a>_psp_get_stack_start</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stack_st.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_parameter_internal
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_parameter_internal
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_restart_func
</UL>

<P><STRONG><a name="[c6]"></a>_psp_int_install</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, int_inst.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = _psp_int_install
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_MSP
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_int_init
</UL>

<P><STRONG><a name="[6]"></a>_int_unexpected_isr</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, int_unx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _int_unexpected_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> int.o(.text)
</UL>
<P><STRONG><a name="[8e]"></a>_int_set_vector_table</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, int_vtab.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqxlite_init
</UL>

<P><STRONG><a name="[162]"></a>_int_get_vector_table</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, int_vtab.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>_int_exception_isr</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, int_xcpt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = _int_exception_isr &rArr; _task_abort &rArr; _task_abort_internal &rArr; _task_exit_function_internal &rArr; _task_destroy &rArr; _task_destroy_internal &rArr; _task_get_td
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_get_exception_handler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_get_isr_data
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_exception_return
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_abort
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_fatal_error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> int.o(.text)
</UL>
<P><STRONG><a name="[88]"></a>_mem_zero</STRONG> (Thumb, 246 bytes, Stack size 20 bytes, mem_zero.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _mem_zero &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqxlite_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_build_stack_frame
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_alloc_td_internal
</UL>

<P><STRONG><a name="[8d]"></a>_psp_int_init</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, psp_iinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = _psp_int_init &rArr; _int_init
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_int_install
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqxlite_init
</UL>

<P><STRONG><a name="[5d]"></a>_psp_add_ticks</STRONG> (Thumb, 78 bytes, Stack size 36 bytes, psp_tiad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _psp_add_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait_for
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmsgq_receive
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_get_ticks
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_for
</UL>

<P><STRONG><a name="[66]"></a>_psp_normalize_ticks</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, psp_tinm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _psp_normalize_ticks &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_get_ticks
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_get_elapsed_ticks_fast
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_get_elapsed_ticks
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_notify_kernel
</UL>

<P><STRONG><a name="[60]"></a>_psp_subtract_ticks</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, psp_tisu.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_set_ticks
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_diff_ticks
</UL>

<P><STRONG><a name="[62]"></a>_psp_subtract_ticks_int32</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, psp_tisu.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_diff_ticks_int32
</UL>

<P><STRONG><a name="[87]"></a>_psp_set_kernel_disable_level</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, sc_irdyq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _psp_set_kernel_disable_level
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_init_kernel_data_internal
</UL>

<P><STRONG><a name="[8b]"></a>_psp_init_readyqs</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, sc_irdyq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _psp_init_readyqs
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqxlite_init
</UL>

<P><STRONG><a name="[ae]"></a>_psp_build_stack_frame</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, stack_bu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _psp_build_stack_frame &rArr; _mem_zero &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_restart_func
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_init_internal
</UL>

<P><STRONG><a name="[a7]"></a>_psp_destroy_stack_frame</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stack_de.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_destroy_internal
</UL>

<P><STRONG><a name="[cc]"></a>enable_irq</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, nvic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lptmr_Init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_PTA14_interrupt
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart0
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart2_fortest
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart1
</UL>

<P><STRONG><a name="[163]"></a>disable_irq</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, nvic.o(.text), UNUSED)

<P><STRONG><a name="[cd]"></a>set_irq_priority</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, nvic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = set_irq_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_PTA14_interrupt
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart0
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart2_fortest
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart1
</UL>

<P><STRONG><a name="[ca]"></a>uart_init</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = uart_init &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart2_fortest
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart1
</UL>

<P><STRONG><a name="[cb]"></a>init_uart1</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = init_uart1 &rArr; uart_init &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_irq_priority
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_init
</UL>

<P><STRONG><a name="[ce]"></a>init_uart2_fortest</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_irq_priority
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_irq
</UL>

<P><STRONG><a name="[d0]"></a>uart_send_data</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpData
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_string
</UL>

<P><STRONG><a name="[cf]"></a>uart_send_string</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart_send_string
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpData
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traceInfo_output
</UL>

<P><STRONG><a name="[d2]"></a>uart0_send_data</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sms_alarm_command
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_at_command
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_send_string
</UL>

<P><STRONG><a name="[d1]"></a>uart0_send_string</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sms_alarm_command
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_at_command
</UL>

<P><STRONG><a name="[d3]"></a>init_uart0</STRONG> (Thumb, 238 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = init_uart0 &rArr; _int_install_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_irq_priority
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_wifi_control_task
</UL>

<P><STRONG><a name="[48]"></a>ADC_Init</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibrate_ADC
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Task
</UL>

<P><STRONG><a name="[49]"></a>Calibrate_ADC</STRONG> (Thumb, 204 bytes, Stack size 4 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Calibrate_ADC
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Task
</UL>

<P><STRONG><a name="[164]"></a>ADC_Start</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, adc.o(.text), UNUSED)

<P><STRONG><a name="[165]"></a>ADC_Stop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, adc.o(.text), UNUSED)

<P><STRONG><a name="[166]"></a>ADC_Trigger</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, adc.o(.text), UNUSED)

<P><STRONG><a name="[c]"></a>adc0_isr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, dma1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> dma1.o(.text)
</UL>
<P><STRONG><a name="[d4]"></a>dma_setup</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dma1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lptmr_isr
</UL>

<P><STRONG><a name="[4a]"></a>DMA1_Init</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, dma1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = DMA1_Init &rArr; app_traceInfo_output &rArr; _mutex_lock &rArr; _sched_boost_priority_internal &rArr; _sched_set_priority_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Task
</UL>

<P><STRONG><a name="[d]"></a>lptmr_isr</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, lptmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = lptmr_isr &rArr; _lwsem_post
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysStatus
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysStatus
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAccStatus
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_setup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lptmr.o(.text)
</UL>
<P><STRONG><a name="[47]"></a>Lptmr_Init</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, lptmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = Lptmr_Init &rArr; app_traceInfo_output &rArr; _mutex_lock &rArr; _sched_boost_priority_internal &rArr; _sched_set_priority_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_create
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Task
</UL>

<P><STRONG><a name="[4c]"></a>Lptmr_Start</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lptmr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Task
</UL>

<P><STRONG><a name="[167]"></a>sleep</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, smc.o(.text), UNUSED)

<P><STRONG><a name="[168]"></a>deepsleep</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, smc.o(.text), UNUSED)

<P><STRONG><a name="[169]"></a>enter_wait</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, smc.o(.text), UNUSED)

<P><STRONG><a name="[16a]"></a>enter_stop</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, smc.o(.text), UNUSED)

<P><STRONG><a name="[16b]"></a>enter_vlpr</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, smc.o(.text), UNUSED)

<P><STRONG><a name="[16c]"></a>exit_vlpr</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, smc.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>enter_vlps</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, smc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = enter_vlps
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Task
</UL>

<P><STRONG><a name="[16d]"></a>enter_lls</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, smc.o(.text), UNUSED)

<P><STRONG><a name="[16e]"></a>enter_vlls3</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, smc.o(.text), UNUSED)

<P><STRONG><a name="[16f]"></a>enter_vlls2</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, smc.o(.text), UNUSED)

<P><STRONG><a name="[170]"></a>enter_vlls1</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, smc.o(.text), UNUSED)

<P><STRONG><a name="[171]"></a>enter_vlls0</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, smc.o(.text), UNUSED)

<P><STRONG><a name="[172]"></a>enter_vlls0_nopor</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, smc.o(.text), UNUSED)

<P><STRONG><a name="[db]"></a>app_cmd_tbl_add</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, app_shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = app_cmd_tbl_add &rArr; Shell_CmdTblAdd &rArr; Shell_ModuleCmdNameGet &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shell_CmdTblAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_task
</UL>

<P><STRONG><a name="[19]"></a>shell_task</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, app_shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = shell_task &rArr; exec_cmd &rArr; Shell_Exec &rArr; Shell_CmdSearch &rArr; Shell_ModuleCmdNameGet &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmsgq_receive
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmsgq_init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_ticks
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shell_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_cmd_tbl_add
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_cmd
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_template_list.o(.constdata)
</UL>
<P><STRONG><a name="[e]"></a>uart1_irq_handler</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, app_shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = uart1_irq_handler &rArr; _lwmsgq_send
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmsgq_send
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_trace.o(.text)
</UL>
<P><STRONG><a name="[e0]"></a>traceInfo_output</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, app_trace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = traceInfo_output &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_string
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[d7]"></a>assert_failed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_trace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = assert_failed &rArr; traceInfo_output &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traceInfo_output
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lptmr_Init
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_task
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_wifi_control_task
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mma8451_control_task
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_irq_handler
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_PTA14_interrupt
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_irq_handler
</UL>

<P><STRONG><a name="[44]"></a>app_traceInfo_output</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, app_trace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = app_traceInfo_output &rArr; _mutex_lock &rArr; _sched_boost_priority_internal &rArr; _sched_set_priority_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_string
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_lock
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_unlock
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putmma8451standby
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lptmr_Init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Init
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_version_information
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_task
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_wifi_control_task
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mma8451_control_task
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Task
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_es201_send_task
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sms_alarm_command
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd_wifidata
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_sms_cmd
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putmma8451running
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLastPeak
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFirstPeak
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mma8451_getdata
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_cmd_tbl_add
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_cmd
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mqxlite_status
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_mqxlite_task_information
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
</UL>

<P><STRONG><a name="[e2]"></a>DumpData</STRONG> (Thumb, 164 bytes, Stack size 56 bytes, app_trace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DumpData &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_string
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_data
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd_wifidata
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_sms_cmd
</UL>

<P><STRONG><a name="[46]"></a>trace_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, app_trace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = trace_init &rArr; _mutex_init &rArr; _mutex_create_component
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart1
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_init
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Task
</UL>

<P><STRONG><a name="[d6]"></a>GetAccStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_mma8451.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lptmr_isr
</UL>

<P><STRONG><a name="[f2]"></a>SetAccStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_mma8451.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putmma8451standby
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putmma8451running
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mma8451_getdata
</UL>

<P><STRONG><a name="[e3]"></a>init_PTA14_interrupt</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, app_mma8451.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = init_PTA14_interrupt &rArr; assert_failed &rArr; traceInfo_output &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_install_isr
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_irq_priority
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mma8451_control_task
</UL>

<P><STRONG><a name="[f1]"></a>angle_calculation</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, app_mma8451.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = angle_calculation
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mma8451_getdata
</UL>

<P><STRONG><a name="[e4]"></a>Get_mean</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, app_mma8451.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Get_mean &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLastPeak
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFirstPeak
</UL>

<P><STRONG><a name="[e8]"></a>Get_var</STRONG> (Thumb, 126 bytes, Stack size 64 bytes, app_mma8451.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Get_var &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLastPeak
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFirstPeak
</UL>

<P><STRONG><a name="[ec]"></a>FindFirstPeak</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, app_mma8451.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = FindFirstPeak &rArr; Get_var &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_var
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_mean
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mma8451_getdata
</UL>

<P><STRONG><a name="[ef]"></a>FindLastPeak</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, app_mma8451.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = FindLastPeak &rArr; Get_var &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_var
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_mean
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mma8451_getdata
</UL>

<P><STRONG><a name="[53]"></a>putmma8451standby</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, app_mma8451.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = putmma8451standby &rArr; app_traceInfo_output &rArr; _mutex_lock &rArr; _sched_boost_priority_internal &rArr; _sched_set_priority_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAccRegs
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAccRegs
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAccStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Task
</UL>

<P><STRONG><a name="[f3]"></a>putmma8451running</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, app_mma8451.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAccRegs
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAccRegs
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAccStatus
</UL>

<P><STRONG><a name="[51]"></a>putmma8451detect</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_mma8451.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Task
</UL>

<P><STRONG><a name="[17]"></a>app_mma8451_control_task</STRONG> (Thumb, 492 bytes, Stack size 16 bytes, app_mma8451.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = app_mma8451_control_task &rArr; mma8451_getdata &rArr; FindLastPeak &rArr; Get_var &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_create
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_ticks
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAccRegs
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAccRegs
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_PTA14_interrupt
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mma8451_getdata
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_template_list.o(.constdata)
</UL>
<P><STRONG><a name="[f5]"></a>get_es201_gps_instance</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_wifi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_wifi_control_task
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_es201_send_task
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gps_information
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sms_alarm_message
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sms_alarm_command
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd_wifidata
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_wifi_image_cmd
</UL>

<P><STRONG><a name="[fc]"></a>do_cmd_wifidata</STRONG> (Thumb, 352 bytes, Stack size 96 bytes, app_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = do_cmd_wifidata &rArr; do_wifi_image_cmd &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_es201_gps_instance
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_sms_cmd
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_wifi_image_cmd
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpData
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_wifi_control_task
</UL>

<P><STRONG><a name="[100]"></a>send_sms_alarm_command</STRONG> (Thumb, 158 bytes, Stack size 136 bytes, app_wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait_ticks
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_ticks
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_es201_gps_instance
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_at_command
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_send_string
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_send_data
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sms_alarm_message
</UL>

<P><STRONG><a name="[101]"></a>send_sms_alarm_message</STRONG> (Thumb, 436 bytes, Stack size 16 bytes, app_wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_ticks
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sms_alarm_command
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_es201_gps_instance
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_es201_send_task
</UL>

<P><STRONG><a name="[102]"></a>get_gps_information</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, app_wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_es201_gps_instance
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_at_command
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_es201_send_task
</UL>

<P><STRONG><a name="[103]"></a>app_es201_send_task</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, app_wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait_ticks
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_ticks
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gps_information
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sms_alarm_message
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_es201_gps_instance
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_at_command
</UL>

<P><STRONG><a name="[18]"></a>app_wifi_control_task</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, app_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = app_wifi_control_task &rArr; do_cmd_wifidata &rArr; do_wifi_image_cmd &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmsgq_receive
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmsgq_init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd_wifidata
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_es201_gps_instance
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart0
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_template_list.o(.constdata)
</UL>
<P><STRONG><a name="[df]"></a>Shell_Init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Shell_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shell_ModuleCmdClr
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_task
</UL>

<P><STRONG><a name="[de]"></a>Shell_Exec</STRONG> (Thumb, 142 bytes, Stack size 72 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Shell_Exec &rArr; Shell_CmdSearch &rArr; Shell_ModuleCmdNameGet &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shell_Scanner
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shell_CmdSearch
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_cmd
</UL>

<P><STRONG><a name="[dc]"></a>Shell_CmdTblAdd</STRONG> (Thumb, 218 bytes, Stack size 64 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Shell_CmdTblAdd &rArr; Shell_ModuleCmdNameGet &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shell_ModuleCmdNameGet
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_cmd_tbl_add
</UL>

<P><STRONG><a name="[10b]"></a>Shell_CmdTblRem</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, shell.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shell_ModuleCmdClr
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[173]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[38]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_normalize_ticks
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimer1_GetTicsPerSecond
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[174]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorTask
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[41]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAccRegs
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_sms_cmd
</UL>

<P><STRONG><a name="[89]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqxlite_init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_init_internal
</UL>

<P><STRONG><a name="[175]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[10d]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[176]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[177]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[104]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_wifi_control_task
</UL>

<P><STRONG><a name="[178]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[10e]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[fd]"></a>strstr</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd_wifidata
</UL>

<P><STRONG><a name="[107]"></a>strncpy</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shell_ModuleCmdNameGet
</UL>

<P><STRONG><a name="[fb]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_sms_cmd
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shell_CmdTblAdd
</UL>

<P><STRONG><a name="[da]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shell_CmdSearch
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shell_CmdTblAdd
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mqxlite_status
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shell_CmdTblRem
</UL>

<P><STRONG><a name="[10a]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shell_CmdTblAdd
</UL>

<P><STRONG><a name="[b5]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_template_index
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_id_from_name
</UL>

<P><STRONG><a name="[f6]"></a>strtok</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, strtok.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strtok
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_sms_cmd
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_wifi_image_cmd
</UL>

<P><STRONG><a name="[f7]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd_wifidata
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_wifi_image_cmd
</UL>

<P><STRONG><a name="[e6]"></a>__aeabi_dadd</STRONG> (Thumb, 326 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_var
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_mean
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[e9]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_var
</UL>

<P><STRONG><a name="[115]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[ea]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_var
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[e7]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_var
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_mean
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[eb]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_var
</UL>

<P><STRONG><a name="[e5]"></a>__aeabi_ui2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_var
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_mean
</UL>

<P><STRONG><a name="[fe]"></a>__aeabi_f2d</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sms_alarm_command
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd_wifidata
</UL>

<P><STRONG><a name="[179]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[ee]"></a>__aeabi_cdcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLastPeak
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFirstPeak
</UL>

<P><STRONG><a name="[ed]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLastPeak
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFirstPeak
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[f9]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_wifi_image_cmd
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[117]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[111]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
</UL>

<P><STRONG><a name="[17a]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[112]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[17b]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[11b]"></a>__strtod_int</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[110]"></a>strtol</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[17c]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[116]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[17d]"></a>_float_epilogue</STRONG> (Thumb, 116 bytes, Stack size 12 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[114]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[113]"></a>_double_epilogue</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>

<P><STRONG><a name="[11f]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[23]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[17e]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[118]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[17f]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[11c]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[13]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[11a]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[124]"></a>_scanf_really_real</STRONG> (Thumb, 586 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[11]"></a>_sgetc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[12]"></a>_sbackspace</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[11d]"></a>_strtoul</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[122]"></a>__aeabi_lmul</STRONG> (Thumb, 122 bytes, Stack size 64 bytes, llmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[180]"></a>_ll_mul</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, llmul.o(.text), UNUSED)

<P><STRONG><a name="[126]"></a>_chval</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[123]"></a>__aeabi_ul2d</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[92]"></a>_sched_start_internal</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqxlite
</UL>

<P><STRONG><a name="[a8]"></a>_sched_run_internal</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_destroy_internal
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_restart_func
</UL>

<P><STRONG><a name="[75]"></a>_sched_check_scheduler_internal</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL))
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_execute_scheduler_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_destroy_internal
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmsgq_send
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmsgq_receive
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_create_at
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_start_preemption
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_set_priority
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_ready
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_unboost_priority_internal
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_boost_priority_internal
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_destroy
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_unlock
</UL>

<P><STRONG><a name="[5a]"></a>_sched_execute_scheduler_internal</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait_ticks
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_check_scheduler_internal
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmsgq_send
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmsgq_receive
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_delay_internal
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_restart_func
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_set_priority_internal
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_yield
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_lock
</UL>

<P><STRONG><a name="[127]"></a>_mqx_api_call</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_api_call
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqx_api_call
</UL>

<P><STRONG><a name="[77]"></a>_task_block</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmsgq_send
</UL>

<P><STRONG><a name="[7]"></a>_int_kernel_isr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL))
<BR>[Address Reference Count : 2]<UL><LI> vectors.o(.vectortable)
<LI> int.o(.text)
</UL>
<P><STRONG><a name="[c7]"></a>_psp_exception_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_exception_isr
</UL>

<P><STRONG><a name="[99]"></a>_mem_test_and_set</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_try_lock
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_lock
</UL>

<P><STRONG><a name="[ab]"></a>__get_PSP</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_abort_internal
</UL>

<P><STRONG><a name="[181]"></a>__get_MSP</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL), UNUSED)

<P><STRONG><a name="[182]"></a>__get_PSR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL), UNUSED)

<P><STRONG><a name="[183]"></a>__enable_interrupt</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL), UNUSED)

<P><STRONG><a name="[184]"></a>__disable_interrupt</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL), UNUSED)

<P><STRONG><a name="[185]"></a>__get_LR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL), UNUSED)

<P><STRONG><a name="[186]"></a>__get_PC</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL), UNUSED)

<P><STRONG><a name="[187]"></a>__get_CONTROL</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL), UNUSED)

<P><STRONG><a name="[128]"></a>__0snprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[188]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[45]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_version_information
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sms_alarm_command
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_wifi_image_cmd
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpData
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_cmd
</UL>

<P><STRONG><a name="[189]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[18a]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[12a]"></a>__0vsnprintf</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[18b]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[18c]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[e1]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __c89vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traceInfo_output
</UL>

<P><STRONG><a name="[18d]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[11e]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[c8]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mem_zero.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shell_Exec
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_zero
</UL>

<P><STRONG><a name="[10f]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[18e]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[12e]"></a>__read_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__read_errno))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[18f]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[190]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[191]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[12f]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[125]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[f8]"></a>atof</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, atof.o(i.atof))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_wifi_image_cmd
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[43]"></a>show_version_information</STRONG> (Thumb, 138 bytes, Stack size 72 bytes, mqx_tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = show_version_information &rArr; app_traceInfo_output &rArr; _mutex_lock &rArr; _sched_boost_priority_internal &rArr; _sched_set_priority_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Task
</UL>

<P><STRONG><a name="[c2]"></a>_task_restart_func</STRONG> (Thumb, 490 bytes, Stack size 64 bytes, task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_td
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_execute_scheduler_internal
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_wait
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_enable
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_int_disable
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sched_run_internal
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_get_stack_start
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psp_build_stack_frame
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_ready_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_restart
</UL>

<P><STRONG><a name="[14]"></a>_int_kernel_isr_epilog</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dispatch.o(KERNEL))
<BR>[Address Reference Count : 1]<UL><LI> dispatch.o(KERNEL)
</UL>
<P><STRONG><a name="[1a]"></a>cmd_list</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, app_shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = cmd_list &rArr; app_traceInfo_output &rArr; _mutex_lock &rArr; _sched_boost_priority_internal &rArr; _sched_set_priority_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_shell.o(.data)
</UL>
<P><STRONG><a name="[d8]"></a>get_task_stack_usage</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, app_shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = get_task_stack_usage &rArr; _task_get_td
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_task_get_td
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_mqxlite_task_information
</UL>

<P><STRONG><a name="[d9]"></a>show_mqxlite_task_information</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, app_shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = show_mqxlite_task_information &rArr; app_traceInfo_output &rArr; _mutex_lock &rArr; _sched_boost_priority_internal &rArr; _sched_set_priority_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_task_stack_usage
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mqxlite_status
</UL>

<P><STRONG><a name="[1b]"></a>get_mqxlite_status</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, app_shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = get_mqxlite_status &rArr; show_mqxlite_task_information &rArr; app_traceInfo_output &rArr; _mutex_lock &rArr; _sched_boost_priority_internal &rArr; _sched_set_priority_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_mqxlite_task_information
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_shell.o(.data)
</UL>
<P><STRONG><a name="[dd]"></a>exec_cmd</STRONG> (Thumb, 116 bytes, Stack size 64 bytes, app_shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = exec_cmd &rArr; Shell_Exec &rArr; Shell_CmdSearch &rArr; Shell_ModuleCmdNameGet &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shell_Exec
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_task
</UL>

<P><STRONG><a name="[f]"></a>MMA8451_INT1_isr_service</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, app_mma8451.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = MMA8451_INT1_isr_service &rArr; _lwsem_post
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwsem_post
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_mma8451.o(.text)
</UL>
<P><STRONG><a name="[f0]"></a>mma8451_getdata</STRONG> (Thumb, 534 bytes, Stack size 248 bytes, app_mma8451.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = mma8451_getdata &rArr; FindLastPeak &rArr; Get_var &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_get_elapsed_ticks
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAccRegs
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLastPeak
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFirstPeak
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;angle_calculation
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAccStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mma8451_control_task
</UL>

<P><STRONG><a name="[f4]"></a>do_wifi_image_cmd</STRONG> (Thumb, 322 bytes, Stack size 40 bytes, app_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = do_wifi_image_cmd &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_es201_gps_instance
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd_wifidata
</UL>

<P><STRONG><a name="[fa]"></a>do_sms_cmd</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, app_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = do_sms_cmd &rArr; app_traceInfo_output &rArr; _mutex_lock &rArr; _sched_boost_priority_internal &rArr; _sched_set_priority_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpData
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd_wifidata
</UL>

<P><STRONG><a name="[ff]"></a>send_at_command</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, app_wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_send_string
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_es201_send_task
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gps_information
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_sms_alarm_command
</UL>

<P><STRONG><a name="[10]"></a>uart0_irq_handler</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, app_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = uart0_irq_handler &rArr; _lwmsgq_send
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lwmsgq_send
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_wifi.o(.text)
</UL>
<P><STRONG><a name="[105]"></a>Shell_ModuleCmdClr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, shell.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shell_Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shell_CmdTblRem
</UL>

<P><STRONG><a name="[106]"></a>Shell_ModuleCmdNameGet</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Shell_ModuleCmdNameGet &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shell_CmdSearch
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shell_CmdTblAdd
</UL>

<P><STRONG><a name="[108]"></a>Shell_CmdSearch</STRONG> (Thumb, 172 bytes, Stack size 56 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Shell_CmdSearch &rArr; Shell_ModuleCmdNameGet &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shell_ModuleCmdNameGet
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shell_Exec
</UL>

<P><STRONG><a name="[109]"></a>Shell_Scanner</STRONG> (Thumb, 108 bytes, Stack size 36 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Shell_Scanner
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shell_Exec
</UL>

<P><STRONG><a name="[12b]"></a>_fp_digits</STRONG> (Thumb, 314 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[129]"></a>_printf_core</STRONG> (Thumb, 1766 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
</UL>

<P><STRONG><a name="[12d]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[12c]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[15]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0snprintf)
<LI> printfa.o(i.__0vsnprintf)
</UL>
<P><STRONG><a name="[119]"></a>_local_sscanf</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[121]"></a>_fp_value</STRONG> (Thumb, 246 bytes, Stack size 56 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
